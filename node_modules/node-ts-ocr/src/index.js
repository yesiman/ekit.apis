"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const childProcess = __importStar(require("child_process"));
const fs = __importStar(require("fs"));
const path = __importStar(require("path"));
const temp = __importStar(require("temp"));
const util = __importStar(require("util"));
const execAsync = util.promisify(childProcess.exec);
const existsAsync = util.promisify(fs.exists);
const readFileAsync = util.promisify(fs.readFile);
class Ocr {
    static extractInfo(filePath) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const exists = yield existsAsync(filePath);
                if (!exists) {
                    throw new Error('No file exists at the path you specified');
                }
                const bin = childProcess.spawn('pdfinfo', ['-box', filePath]);
                return new Promise((resolve, reject) => {
                    this.binaryListener(bin, (error, data) => {
                        if (error) {
                            reject(error);
                        }
                        else if (data === undefined) {
                            reject(new Error('PDF info could NOT be extracted'));
                        }
                        else {
                            resolve(this.convertDataToKeyValueObject(data));
                        }
                    });
                });
            }
            catch (error) {
                throw error;
            }
        });
    }
    static extractText(filePath, options) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const exists = yield existsAsync(filePath);
                if (!exists) {
                    throw new Error('No file exists at the path you specified');
                }
                const args = [];
                if (filePath.endsWith('.pdf')) {
                    if (options && options.pdfToTextArgs) {
                        for (const [key, value] of Object.entries(options.pdfToTextArgs)) {
                            args.push(`-${key}`);
                            args.push(`${value}`);
                        }
                    }
                    args.push('-layout');
                    args.push('-enc');
                    args.push('UTF-8');
                    args.push(filePath);
                    args.push('-');
                    const bin = childProcess.spawn('pdftotext', args);
                    const pdfToTextResult = yield new Promise((resolve, reject) => {
                        this.binaryListener(bin, (error, data) => {
                            if (error) {
                                reject(error);
                            }
                            else if (data === undefined) {
                                reject(new Error('PDF text could NOT be extracted'));
                            }
                            else {
                                resolve(data);
                            }
                        });
                    });
                    if (pdfToTextResult && pdfToTextResult.trim() !== '') {
                        return pdfToTextResult;
                    }
                }
                const tmpDir = temp.mkdirSync('tmp');
                let tiffOutputPath;
                try {
                    tiffOutputPath = yield this.invokePdfToTiff(tmpDir, filePath, options);
                }
                catch (error) {
                    if (error) {
                        throw error;
                    }
                    throw new Error('Conversion from PDF to TIFF failed');
                }
                return this.invokeImageOcr(tmpDir, tiffOutputPath, options);
            }
            catch (error) {
                throw error;
            }
        });
    }
    static invokePdfToTiff(outDir, filePath, options) {
        return __awaiter(this, void 0, void 0, function* () {
            const args = [];
            if (options && options.convertArgs) {
                for (const [key, value] of Object.entries(options.convertArgs)) {
                    if (key === 'density') {
                        args.push(`-${key}`);
                        args.push(`${value}`);
                        break;
                    }
                }
            }
            args.push(filePath);
            if (options && options.convertArgs) {
                for (const [key, value] of Object.entries(options.convertArgs)) {
                    args.push(`-${key}`);
                    args.push(`${value}`);
                }
            }
            const outputPath = path.join(outDir, 'tiff_output.tiff');
            fs.writeFileSync(outputPath, undefined);
            args.push(outputPath);
            const cmd = `convert ${args.join(' ')}`;
            try {
                const { stderr } = yield execAsync(cmd);
                if (stderr) {
                    throw stderr;
                }
                return outputPath;
            }
            catch (error) {
                throw error;
            }
        });
    }
    static invokeImageOcr(outDir, imagePath, options) {
        return __awaiter(this, void 0, void 0, function* () {
            const args = [];
            if (options && options.tesseractArgs) {
                for (const [key, value] of Object.entries(options.tesseractArgs)) {
                    args.push(`-${key}`);
                    args.push(`${value}`);
                }
            }
            const outputPath = path.join(outDir, 'output');
            const cmd = `tesseract ${imagePath} ${outputPath} ${args.join(' ')}`;
            try {
                yield execAsync(cmd);
                return yield readFileAsync(outputPath + '.txt', 'utf8');
            }
            catch (error) {
                throw error;
            }
        });
    }
    static convertDataToKeyValueObject(data) {
        const result = {};
        const lines = data.split(/\n/g);
        for (const item of lines) {
            const line = item.split(':');
            if (line.length < 2) {
                continue;
            }
            const key = line[0]
                .trim()
                .toLowerCase()
                .replace(/ /g, '_');
            let value = '';
            for (let i = 1; i < line.length; i++) {
                if (i + 1 < line.length) {
                    value += line[i].trim() + ':';
                }
                else {
                    value += line[i].trim();
                }
            }
            if (value !== '' && !isNaN(parseInt(value, 16))) {
                value = parseFloat(value);
            }
            else if (value !== '' && !isNaN(Date.parse(value))) {
                value = Date.parse(value);
            }
            result[key] = value;
        }
        return result;
    }
    static binaryListener(bin, callback) {
        const monitorErr = [];
        const monitorData = [];
        bin.stdout.setEncoding('utf8');
        bin.stdout.on('data', (data) => {
            monitorData.push(data.toString());
        });
        bin.stderr.setEncoding('utf8');
        bin.stderr.on('data', (data) => {
            monitorErr.push(data.toString());
        });
        bin.on('exit', (code) => {
            if (code === 0) {
                return callback && callback(undefined, monitorData.join(''));
            }
            return callback && callback(new Error(monitorErr.join('')));
        });
    }
}
exports.Ocr = Ocr;
